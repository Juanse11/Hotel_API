var bits, entropy, process,
  __hasProp = {}.hasOwnProperty;

process = function(s, evaluator) {
  var c, h, k, _i, _len;
  h = {};
  if (typeof s === "string") {
    s = s.split('');
  }
  for (_i = 0, _len = s.length; _i < _len; _i++) {
    c = s[_i];
    if (h[c] == null) {
      h[c] = 0;
    }
    h[c]++;
  }
  if (evaluator != null) {
    for (k in h) {
      if (!__hasProp.call(h, k)) continue;
      evaluator(k, h[k]);
    }
  }
  return h;
};

entropy = function(s) {
  var len, log2, sum;
  sum = 0;
  len = s.length;
  log2 = Math.log(2);
  process(s, function(k, f) {
    var p;
    p = f / len;
    return sum -= p * Math.log(p) / log2;
  });
  return sum;
};

bits = function(s) {
  return entropy(s) * s.length;
};

module.exports = {
  bitsPerSymbol: entropy,
  totalBits: bits
};
